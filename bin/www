#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('HACKER_NEWS:server');
var http = require('http');
var fs = require("fs");
var path = require("path");
var Promise = require("bluebird");
var mongoose = require('mongoose');
mongoose.Promise = Promise;
var newsSrvc = require('../services/NewsSrvc');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);

mongoose.connect('mongodb://localhost/test');
var db = mongoose.connection;

db.on('error', console.error.bind(console, 'connection error:'));

db.once('open', function () {
    console.log("DB Connected.");

    initModels();
    console.log("Tables initialized.");

    newsSrvc.updateNews() // put initial data to DB from Hacker News
        .then(function () {
            server.listen(port);
            server.on('error', onError);
            server.on('listening', onListening);
            setInterval(function() {
                console.log("Started scheduled update ...");
                newsSrvc.updateNews();
            }, 5000 * 60); // scheduled update every 5 minutes
        });
});

function initModels() {
    var modelsDir = path.join(__dirname, '../models');

    fs
        .readdirSync(modelsDir)
        .forEach(function (file) {
            var modelName = file.substring(0, file.indexOf('.'));
            var model = mongoose.model(modelName, require(path.join(modelsDir, file)));
            global[modelName] = model;
        });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
